#定义ninx运行的linux用户和用户组 格式:  user  username [group] ;   
user lgj;

#nginx进程数，建议设置为CPU的总核心数
worker_processes auto;

#进程PID文件 
#运行的用户或者用户组必须有写权限，否则启动会报错
#全局错误日志定义类型 debug/info/notice/warn/error/crit/
#该指令可以在全局块。http server  location
error_log /usr/local/nginx/logs/error.log info;
#记录服务器提供服务过程应答前端请求的日志
#access_log  path [format[buffer=size]];
#access_log /usr/local/nginx/logs/access.log  combined;
 # 引入该路径下的配置文件
include /etc/nginx/modules-enabled/*.conf;

#指定进程可以打开的最大描述符：数目
#工作模式与连接数上限
#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。
#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。
worker_rlimit_nofile 65535;
 
#与用户建立会话连接后，可以保持这些连接打开一段时间
#keepalive_timeout  timeout  [header_timeout]
#全局块 http  server location 
#在服务端保持连接120s，发给客户端的应答保温头部中的KEEP-ALIVE域的超时时间为100s
#keepalive_timeout  120s  100s

events {
    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型
    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。
    #补充说明：
    #与apache相类，nginx针对不同的操作系统，有不同的事件模型
    #A）标准事件模型
    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll
    #B）高效事件模型
    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
    #Epoll：使用于Linux内核2.6版本及以后的系统。
    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。
    use epoll;

    #单个进程最大连接数（最大连接数=连接数*进程数）
    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。
    worker_connections 768;
    # multi_accept on;
   
     #keepalive超时时间。
   # keepalive_timeout 60;

    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。
    #分页大小可以用命令getconf PAGESIZE 取得。
    #[root@web001 ~]# getconf PAGESIZE
    #4096
    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。
#    client_header_buffer_size 4k;

    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。
   # open_file_cache max=65535 inactive=60s;

    #这个是指多长时间检查一次缓存的有效信息。
    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.
    #open_file_cache_valid 80s;

    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。
    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在
    #open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.
    #open_file_cache_min_uses 1;
    
    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.
    #open_file_cache_errors on;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##
        #使能了以下配置才生效
	gzip on;

	# gzip_vary on;
	# gzip_proxied anyo;
	# 压缩程度 1- 9 ， 压缩程度越大，效率越低
	# gzip_comp_level 6;
	# 用于设置压缩文件使用的缓存空间的大小 num * size,size 去内存一页的大小，4k  /  8k
	# gzip_buffers 16 8k;
	# http版本，默认为1.1 ， 也就是1.1才进行压缩操作
	# gzip_http_version 1.1;
	# 最小的压缩大小，小于这个的数据不进行压缩
	# gzip_min_length  1024;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	 # 
        upstream mysvr {
           #weigth参数表示权值，权值越高被分配到的几率越大
           #本机上的Squid开启3128端口
           server localhost:7001 weight=2;
           server localhost:7000 weight=8;          
        }
	##
	# Virtual Host Configs
	##

	server{
	   listen   8081;

	   location /{
                proxy_pass  http://mysvr;
            }
	}

	server{
	    listen   8082;
	   location  /data/{
            	root /nginx/html/;
            }
	}

        # seckill
 	upstream seckill{
              #weigth参数表示权值，权值越高被分配到的几率越大
            #本机上的Squid开启3128端口
            server localhost:7100 weight=2;
           # server localhost:7000 weight=8;
         }
	server{
	   listen 8083;
	   location ~/M00{
              root cd ~/java/fastfds/storage/data;
	      ngx_fastdfs_module;
           }	   
	}
 
	 server{
             listen   7200;
             location /{
                 proxy_pass  http://seckill;

	     }

	    location  ~  /druid/.*\.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {
                  proxy_pass  http://seckill;
 
             }


          location  ~ swagger-ui.*\.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {
                   proxy_pass  http://seckill;
 
              }

          # 所有静态请求都由nginx处理，存放目录为html  
             location ~ \.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {
                root /nginx/seckill;
                index index.html;
	     }
	}


         # microblog
         upstream microblog{
               #weigth参数表示权值，权值越高被分配到的几率越大
             #本机上的Squid开启3128端口
             server localhost:6003 weight=2;
            # server localhost:7000 weight=8;
          }
 
          server{
              listen   7300;
              location /{
                  proxy_pass  http://microblog;
 
              }
 
             location  ~  /druid/.*\.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {
                   proxy_pass  http://microblog;
 
              }
 
 
           location  ~ swagger-ui.*\.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {
                    proxy_pass  http://microblog;
 
               }
 
           # 所有静态请求都由nginx处理，存放目录为html  
              location ~ \.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {
                 root /nginx/microblog;
                 index index.html;
              }
         }

	include /etc/nginx/conf.d/*.conf;
#	include /etc/nginx/sites-enabled/*;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#
